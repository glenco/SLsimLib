SIMPLE  =                    T / file does conform to FITS standard             BITPIX  =                  -64 / number of bits per data pixel                  NAXIS   =                    2 / number of data axes                            NAXIS1  =                    5 / length of data axis 1                          NAXIS2  =                    5 / length of data axis 2                          EXTEND  =                    T / FITS dataset may contain extensions            COMMENT   FITS (Flexible Image Transport System) format is defined in 'AstronomyCOMMENT   and Astrophysics', volume 376, page 359; bibcode: 2001A&A...376..359H CREATOR = 'ShapeLens++'                                                         VERSION =                    1 / SIF version                                                                                                                            / Shapelet parameters  /                                                BETA    =     1.84961551570168 / scale size in pixel units                      DIM     =                    5 / dimensions in shapelet space (nmax+1)          CHI2    =     1.22614308164715 / decomposition quality                          ERRORS  =                    1 / whether coefficient errors are available       R       =                   0. / negative flux / positive flux                  FLAGS   =                  768 / extraction and decomposition flags             EXTNAME = '        '           / shapelet object name                           TAG     =                   0. / shapelet object tag                                    / Frame parameters     /                                                BASEFILE= 'h_udf_wfc_i_drz_img.fits' / originating data file                    ID      =                 8152 / object id in BASEFILE                          HIERARCH CLASSIFIER =     0.06 / object classifier                              HIERARCH NOISE_MEAN =       0. / mean of pixel noise                            HIERARCH NOISE_RMS =        0. / rms of pixel noise                             XMIN    =                5090. / min(X) in image pixels                         XMAX    =                5120. / max(X) in image pixels                         YMIN    =                6947. / min(Y) in image pixels                         YMAX    =                6977. / min(Y) in image pixels                         CENTROID=   (5106.06, 6961.55) / centroid position in image pixels                      / ShapeLensConfig parameters /                                          HIERARCH NOISEMODEL = 'WEIGHT  ' / noise model                                  HIERARCH NMAX_LOW =          0 / lower bound for n_max                          HIERARCH NMAX_HIGH =        24 / upper bound for n_max                          HIERARCH BETA_LOW =         0. / lower bound for beta                           HIERARCH REGULARIZE =        0 / whether regularization has been employed       HIERARCH REG_LIMIT =   1.0E-05 / demanded upper limit for R                     HIERARCH SAVE_UNREG =        1 / whether unregularized model is saved           HIERARCH ALLOW_FLATTENING =  1 / whether flattening of chi^2 is allowed         HIERARCH FILTER_SPURIOUS =   0 / whether spurious detection are removed         HIERARCH ADD_BORDER =     0.15 / amount of border around detected objects       HIERARCH MIN_PIXELS =       20 / minimum number of pixels for an object         HIERARCH MIN_THRESHOLD =  1.25 / threshold for MIN_PIXELS                       HIERARCH DETECT_THRESHOLD = 3. / detection threshold for objects                                                                                                HISTORY # Extracting Object 8152 found in the area (5102/6959) to (5108/6965)   HISTORY # Extending the area around object to (5090/6947) to (5120/6977)        HISTORY # Object 8707 nearby, but not overlapping.                              HISTORY # Segment:                                                              HISTORY # Setting catalog values: Flux = 0.00783349, Centroid = (5106.06/6961.55HISTORY )                                                                       HISTORY # Setting noise to (0) +- (0)                                           HISTORY , segmentation map and weight map                                       HISTORY #                                                                       HISTORY # Finding optimal beta, n_max = 2                                       HISTORY # initial setup: a = 0.866, beta = 3, b = 6                             HISTORY # after checking limits: a = 0.866, beta = 3, b = 6                     HISTORY # starting values: f(a) = 1.238, f(beta) = 1.239, f(b) = 1.258          HISTORY # after bracketing: f(a) = 1.239, f(beta) = 1.238, f(b) = 1.239         HISTORY # Setting limits: 0.836 <= beta <= 3                                    HISTORY # Starting with beta = 0.866                                            HISTORY # iter. chi^2   beta    delta(beta)                                     HISTORY # 1     1.229   1.681   2.134                                           HISTORY # 2     1.229   1.666   0.8151                                          HISTORY # 3     1.229   1.666   0.8                                             HISTORY # 4     1.229   1.666   0.3058                                          HISTORY # 5     1.229   1.666   0.117                                           HISTORY # 6     1.229   1.666   0.04488                                         HISTORY # Converged to minimum: chi^2 = 1.229 at beta = 1.666                   HISTORY #                                                                       HISTORY # Finding optimal decomposition order n_max, beta = 1.666               HISTORY # iter. n_max   chi^2   sigma(chi^2)                                    HISTORY # 1     2       1.229   0.0473                                          HISTORY # 1     4       1.227   0.04754                                         HISTORY # chi^2 becomes flat. Stopping search at n_max = 4.                     HISTORY #                                                                       HISTORY # Finding optimal beta, n_max = 4                                       HISTORY # initial setup: a = 1.333, beta = 1.666, b = 1.832                     HISTORY # after checking limits: a = 1.333, beta = 1.666, b = 1.832             HISTORY # starting values: f(a) = 1.231, f(beta) = 1.227, f(b) = 1.226          HISTORY # after bracketing: f(a) = 1.227, f(beta) = 1.226, f(b) = 1.238         HISTORY # Setting limits: 1.666 <= beta <= 2.748                                HISTORY # Starting with beta = 1.832                                            HISTORY # iter. chi^2   beta    delta(beta)                                     HISTORY # 1     1.226   1.832   0.5165                                          HISTORY # 2     1.226   1.832   0.3002                                          HISTORY # 3     1.226   1.832   0.1973                                          HISTORY # 4     1.226   1.832   0.1147                                          HISTORY # 5     1.226   1.832   0.07536                                         HISTORY # 6     1.226   1.852   0.05106                                         HISTORY # 7     1.226   1.85    0.0195                                          HISTORY # Converged to minimum: chi^2 = 1.226 at beta = 1.85                    HISTORY #                                                                       HISTORY # Decomposition stopped before chi^2 = 1!                               HISTORY #                                                                       HISTORY # Computation time for decomposition: 0 seconds                         REDSHIFT=                 0.87 / photometric redshift                           SED_TYPE=                   19 / SED template                                   MAG     =               30.275 / AB magnitude                                   MAG_ERR =                 0.17 / AB magnitude error`*ÓªË}ï?'9√ÙgrÆ?]H™Í·Læó⁄ÈFWµ?6ÔI◊¢? ËM®føIFÄtœ‘WøC‘ç»ï7€>Á;3Úù‚        ø2ì‘í=?0»ì¶|ú?@–„áÛ_                ?Á¯ÿdræ„˜¶ß¶H'                        ?;††¨0"Ö                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        