SIMPLE  =                    T / file does conform to FITS standard             BITPIX  =                  -64 / number of bits per data pixel                  NAXIS   =                    2 / number of data axes                            NAXIS1  =                    5 / length of data axis 1                          NAXIS2  =                    5 / length of data axis 2                          EXTEND  =                    T / FITS dataset may contain extensions            COMMENT   FITS (Flexible Image Transport System) format is defined in 'AstronomyCOMMENT   and Astrophysics', volume 376, page 359; bibcode: 2001A&A...376..359H CREATOR = 'ShapeLens++'                                                         VERSION =                    1 / SIF version                                                                                                                            / Shapelet parameters  /                                                BETA    =     8.48295692845848 / scale size in pixel units                      DIM     =                    5 / dimensions in shapelet space (nmax+1)          CHI2    =     1.26056422253653 / decomposition quality                          ERRORS  =                    1 / whether coefficient errors are available       R       =                   0. / negative flux / positive flux                  FLAGS   =                  768 / extraction and decomposition flags             EXTNAME = '        '           / shapelet object name                           TAG     =                   0. / shapelet object tag                                    / Frame parameters     /                                                BASEFILE= 'h_udf_wfc_i_drz_img.fits' / originating data file                    ID      =                 2050 / object id in BASEFILE                          HIERARCH CLASSIFIER =     0.06 / object classifier                              HIERARCH NOISE_MEAN =       0. / mean of pixel noise                            HIERARCH NOISE_RMS =        0. / rms of pixel noise                             XMIN    =                2567. / min(X) in image pixels                         XMAX    =                2607. / max(X) in image pixels                         YMIN    =                3533. / min(Y) in image pixels                         YMAX    =                3573. / min(Y) in image pixels                         CENTROID=   (2588.97, 3551.91) / centroid position in image pixels                      / ShapeLensConfig parameters /                                          HIERARCH NOISEMODEL = 'WEIGHT  ' / noise model                                  HIERARCH NMAX_LOW =          0 / lower bound for n_max                          HIERARCH NMAX_HIGH =        24 / upper bound for n_max                          HIERARCH BETA_LOW =         0. / lower bound for beta                           HIERARCH REGULARIZE =        0 / whether regularization has been employed       HIERARCH REG_LIMIT =   1.0E-05 / demanded upper limit for R                     HIERARCH SAVE_UNREG =        1 / whether unregularized model is saved           HIERARCH ALLOW_FLATTENING =  1 / whether flattening of chi^2 is allowed         HIERARCH FILTER_SPURIOUS =   0 / whether spurious detection are removed         HIERARCH ADD_BORDER =     0.15 / amount of border around detected objects       HIERARCH MIN_PIXELS =       20 / minimum number of pixels for an object         HIERARCH MIN_THRESHOLD =  1.25 / threshold for MIN_PIXELS                       HIERARCH DETECT_THRESHOLD = 3. / detection threshold for objects                                                                                                HISTORY # Extracting Object 2050 found in the area (2579/3547) to (2594/3558)   HISTORY # Extending the area around object to (2567/3533) to (2607/3573)        HISTORY # Segment:                                                              HISTORY # Setting catalog values: Flux = 0.0289618, Centroid = (2588.97/3551.91)HISTORY # Setting noise to (0) +- (0)                                           HISTORY , segmentation map and weight map                                       HISTORY #                                                                       HISTORY # Finding optimal beta, n_max = 2                                       HISTORY # initial setup: a = 0.866, beta = 5, b = 10                            HISTORY # after checking limits: a = 0.866, beta = 5, b = 10                    HISTORY # starting values: f(a) = 1.299, f(beta) = 1.268, f(b) = 1.272          HISTORY # after bracketing: f(a) = 1.299, f(beta) = 1.268, f(b) = 1.272         HISTORY # Setting limits: 0.866 <= beta <= 10                                   HISTORY # Starting with beta = 5                                                HISTORY # iter. chi^2   beta    delta(beta)                                     HISTORY # 1     1.264   6.91    5                                               HISTORY # 2     1.264   6.672   1.91                                            HISTORY # 3     1.264   6.672   1.686                                           HISTORY # 4     1.264   6.672   0.653                                           HISTORY # 5     1.264   6.672   0.6387                                          HISTORY # 6     1.264   6.672   0.244                                           HISTORY # 7     1.264   6.658   0.244                                           HISTORY # 8     1.264   6.659   0.01388                                         HISTORY # Converged to minimum: chi^2 = 1.264 at beta = 6.659                   HISTORY #                                                                       HISTORY # Finding optimal decomposition order n_max, beta = 6.659               HISTORY # iter. n_max   chi^2   sigma(chi^2)                                    HISTORY # 1     2       1.264   0.03542                                         HISTORY # 1     4       1.263   0.03552                                         HISTORY # chi^2 becomes flat. Stopping search at n_max = 4.                     HISTORY #                                                                       HISTORY # Finding optimal beta, n_max = 4                                       HISTORY # initial setup: a = 5.327, beta = 6.659, b = 7.325                     HISTORY # after checking limits: a = 5.327, beta = 6.659, b = 7.325             HISTORY # starting values: f(a) = 1.264, f(beta) = 1.263, f(b) = 1.262          HISTORY # after bracketing: f(a) = 1.263, f(beta) = 1.262, f(b) = 1.263         HISTORY # Setting limits: 6.659 <= beta <= 9.011                                HISTORY # Starting with beta = 7.325                                            HISTORY # iter. chi^2   beta    delta(beta)                                     HISTORY # 1     1.261   7.969   1.686                                           HISTORY # 2     1.261   8.367   1.042                                           HISTORY # 3     1.261   8.546   0.644                                           HISTORY # 4     1.261   8.483   0.1789                                          HISTORY # 5     1.261   8.483   0.1161                                          HISTORY # Converged to minimum: chi^2 = 1.261 at beta = 8.483                   HISTORY #                                                                       HISTORY # Decomposition stopped before chi^2 = 1!                               HISTORY #                                                                       HISTORY # Computation time for decomposition: 0 seconds                         REDSHIFT=                 1.37 / photometric redshift                           SED_TYPE=                   19 / SED template                                   MAG     =               29.276 / AB magnitude                                   MAG_ERR =                 0.11 / AB magnitude errorñ(`•'?DhØxš¯F¿[Y|¾·§q¿Z¯e?A„xŽ·P¿2^Ð{?E1*áã!*?GÆÀøÜÐ?$¾®ÊÓS4        ¿`·¢’ö¢¿B,(€O_3?
‰,EŽ                ?Cðà½ênu?DœPÜ òÃ                        ?5ÿA                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        