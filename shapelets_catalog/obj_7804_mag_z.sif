SIMPLE  =                    T / file does conform to FITS standard             BITPIX  =                  -64 / number of bits per data pixel                  NAXIS   =                    2 / number of data axes                            NAXIS1  =                    5 / length of data axis 1                          NAXIS2  =                    5 / length of data axis 2                          EXTEND  =                    T / FITS dataset may contain extensions            COMMENT   FITS (Flexible Image Transport System) format is defined in 'AstronomyCOMMENT   and Astrophysics', volume 376, page 359; bibcode: 2001A&A...376..359H CREATOR = 'ShapeLens++'                                                         VERSION =                    1 / SIF version                                                                                                                            / Shapelet parameters  /                                                BETA    =     6.41608856167374 / scale size in pixel units                      DIM     =                    5 / dimensions in shapelet space (nmax+1)          CHI2    =     1.15134914860927 / decomposition quality                          ERRORS  =                    1 / whether coefficient errors are available       R       =                   0. / negative flux / positive flux                  FLAGS   =                  768 / extraction and decomposition flags             EXTNAME = '        '           / shapelet object name                           TAG     =                   0. / shapelet object tag                                    / Frame parameters     /                                                BASEFILE= 'h_udf_wfc_i_drz_img.fits' / originating data file                    ID      =                 7804 / object id in BASEFILE                          HIERARCH CLASSIFIER =     0.06 / object classifier                              HIERARCH NOISE_MEAN =       0. / mean of pixel noise                            HIERARCH NOISE_RMS =        0. / rms of pixel noise                             XMIN    =                7531. / min(X) in image pixels                         XMAX    =                7583. / max(X) in image pixels                         YMIN    =                7607. / min(Y) in image pixels                         YMAX    =                7659. / min(Y) in image pixels                         CENTROID=     (7553., 7633.05) / centroid position in image pixels                      / ShapeLensConfig parameters /                                          HIERARCH NOISEMODEL = 'WEIGHT  ' / noise model                                  HIERARCH NMAX_LOW =          0 / lower bound for n_max                          HIERARCH NMAX_HIGH =        24 / upper bound for n_max                          HIERARCH BETA_LOW =         0. / lower bound for beta                           HIERARCH REGULARIZE =        0 / whether regularization has been employed       HIERARCH REG_LIMIT =   1.0E-05 / demanded upper limit for R                     HIERARCH SAVE_UNREG =        1 / whether unregularized model is saved           HIERARCH ALLOW_FLATTENING =  1 / whether flattening of chi^2 is allowed         HIERARCH FILTER_SPURIOUS =   0 / whether spurious detection are removed         HIERARCH ADD_BORDER =     0.15 / amount of border around detected objects       HIERARCH MIN_PIXELS =       20 / minimum number of pixels for an object         HIERARCH MIN_THRESHOLD =  1.25 / threshold for MIN_PIXELS                       HIERARCH DETECT_THRESHOLD = 3. / detection threshold for objects                                                                                                HISTORY # Extracting Object 7804 found in the area (7544/7619) to (7569/7646)   HISTORY # Extending the area around object to (7531/7607) to (7583/7659)        HISTORY # Object 13417 nearby, but not overlapping.                             HISTORY # Segment:                                                              HISTORY # Setting catalog values: Flux = 0.146858, Centroid = (7553/7633.05)    HISTORY # Setting noise to (0) +- (0)                                           HISTORY , segmentation map and weight map                                       HISTORY #                                                                       HISTORY # Finding optimal beta, n_max = 2                                       HISTORY # initial setup: a = 0.866, beta = 6, b = 12                            HISTORY # after checking limits: a = 0.866, beta = 6, b = 12                    HISTORY # starting values: f(a) = 1.215, f(beta) = 1.158, f(b) = 1.162          HISTORY # after bracketing: f(a) = 1.215, f(beta) = 1.158, f(b) = 1.162         HISTORY # Setting limits: 0.866 <= beta <= 12                                   HISTORY # Starting with beta = 6                                                HISTORY # iter. chi^2   beta    delta(beta)                                     HISTORY # 1     1.156   8.292   6                                               HISTORY # 2     1.156   8.292   2.43                                            HISTORY # 3     1.156   8.292   1.014                                           HISTORY # 4     1.156   8.292   0.8754                                          HISTORY # 5     1.156   7.957   0.8754                                          HISTORY # 6     1.156   8.02    0.3344                                          HISTORY # 7     1.156   8.02    0.2717                                          HISTORY # 8     1.156   8.02    0.1038                                          HISTORY # Converged to minimum: chi^2 = 1.156 at beta = 8.02                    HISTORY #                                                                       HISTORY # Finding optimal decomposition order n_max, beta = 8.02                HISTORY # iter. n_max   chi^2   sigma(chi^2)                                    HISTORY # 1     2       1.156   0.02723                                         HISTORY # 1     4       1.152   0.02727                                         HISTORY # chi^2 becomes flat. Stopping search at n_max = 4.                     HISTORY #                                                                       HISTORY # Finding optimal beta, n_max = 4                                       HISTORY # initial setup: a = 6.416, beta = 8.02, b = 8.822                      HISTORY # after checking limits: a = 6.416, beta = 8.02, b = 8.822              HISTORY # starting values: f(a) = 1.151, f(beta) = 1.152, f(b) = 1.153          HISTORY # after bracketing: f(a) = 1.154, f(beta) = 1.151, f(b) = 1.152         HISTORY # Setting limits: 4.277 <= beta <= 8.02                                 HISTORY # Starting with beta = 6.416                                            HISTORY # iter. chi^2   beta    delta(beta)                                     HISTORY # 1     1.151   6.416   2.421                                           HISTORY # 2     1.151   6.416   1.43                                            HISTORY # 3     1.151   6.416   0.9247                                          HISTORY # 4     1.151   6.416   0.5461                                          HISTORY # 5     1.151   6.416   0.3532                                          HISTORY # 6     1.151   6.416   0.2086                                          HISTORY # 7     1.151   6.416   0.1349                                          HISTORY # Converged to minimum: chi^2 = 1.151 at beta = 6.416                   HISTORY #                                                                       HISTORY # Decomposition stopped before chi^2 = 1!                               HISTORY #                                                                       HISTORY # Computation time for decomposition: 0 seconds                         REDSHIFT=                 1.24 / photometric redshift                           SED_TYPE=                   18 / SED template                                   MAG     =               28.323 / AB magnitude                                   MAG_ERR =                0.094 / AB magnitude errorriƒév¿?P–® mú¿/‹+—Í¿ˆ¡çü
ú¾þ@Nægb¾ù±ÈÊ©ë?¿6ÿ×¤Žã¿Úko^SG¿LfHÍJÚö        ?1ÝVoÝÿý¿A ´ë¨¿?PHDÌJÞî                ?B”ó¨G
¿9'Þ„êÎz                        ?,Xg³bð/                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        