SIMPLE  =                    T / file does conform to FITS standard             BITPIX  =                  -64 / number of bits per data pixel                  NAXIS   =                    2 / number of data axes                            NAXIS1  =                    5 / length of data axis 1                          NAXIS2  =                    5 / length of data axis 2                          EXTEND  =                    T / FITS dataset may contain extensions            COMMENT   FITS (Flexible Image Transport System) format is defined in 'AstronomyCOMMENT   and Astrophysics', volume 376, page 359; bibcode: 2001A&A...376..359H CREATOR = 'ShapeLens++'                                                         VERSION =                    1 / SIF version                                                                                                                            / Shapelet parameters  /                                                BETA    =     2.18261277930097 / scale size in pixel units                      DIM     =                    5 / dimensions in shapelet space (nmax+1)          CHI2    =     1.16834539834736 / decomposition quality                          ERRORS  =                    1 / whether coefficient errors are available       R       =                   0. / negative flux / positive flux                  FLAGS   =                  768 / extraction and decomposition flags             EXTNAME = '        '           / shapelet object name                           TAG     =                   0. / shapelet object tag                                    / Frame parameters     /                                                BASEFILE= 'h_udf_wfc_i_drz_img.fits' / originating data file                    ID      =                 1300 / object id in BASEFILE                          HIERARCH CLASSIFIER =     0.06 / object classifier                              HIERARCH NOISE_MEAN =       0. / mean of pixel noise                            HIERARCH NOISE_RMS =        0. / rms of pixel noise                             XMIN    =                7246. / min(X) in image pixels                         XMAX    =                7294. / max(X) in image pixels                         YMIN    =                2967. / min(Y) in image pixels                         YMAX    =                3015. / min(Y) in image pixels                         CENTROID=     (7270.14, 2992.) / centroid position in image pixels                      / ShapeLensConfig parameters /                                          HIERARCH NOISEMODEL = 'WEIGHT  ' / noise model                                  HIERARCH NMAX_LOW =          0 / lower bound for n_max                          HIERARCH NMAX_HIGH =        24 / upper bound for n_max                          HIERARCH BETA_LOW =         0. / lower bound for beta                           HIERARCH REGULARIZE =        0 / whether regularization has been employed       HIERARCH REG_LIMIT =   1.0E-05 / demanded upper limit for R                     HIERARCH SAVE_UNREG =        1 / whether unregularized model is saved           HIERARCH ALLOW_FLATTENING =  1 / whether flattening of chi^2 is allowed         HIERARCH FILTER_SPURIOUS =   0 / whether spurious detection are removed         HIERARCH ADD_BORDER =     0.15 / amount of border around detected objects       HIERARCH MIN_PIXELS =       20 / minimum number of pixels for an object         HIERARCH MIN_THRESHOLD =  1.25 / threshold for MIN_PIXELS                       HIERARCH DETECT_THRESHOLD = 3. / detection threshold for objects                                                                                                HISTORY # Extracting Object 1300 found in the area (7261/2979) to (7278/3003)   HISTORY # Extending the area around object to (7246/2967) to (7294/3015)        HISTORY # Segment:                                                              HISTORY # Setting catalog values: Flux = 0.190791, Centroid = (7270.14/2992)    HISTORY # Setting noise to (0) +- (0)                                           HISTORY , segmentation map and weight map                                       HISTORY #                                                                       HISTORY # Finding optimal beta, n_max = 2                                       HISTORY # initial setup: a = 0.866, beta = 6, b = 12                            HISTORY # after checking limits: a = 0.866, beta = 6, b = 12                    HISTORY # starting values: f(a) = 2.205, f(beta) = 1.749, f(b) = 2.576          HISTORY # after bracketing: f(a) = 2.205, f(beta) = 1.749, f(b) = 2.576         HISTORY # Setting limits: 0.866 <= beta <= 12                                   HISTORY # Starting with beta = 6                                                HISTORY # iter. chi^2   beta    delta(beta)                                     HISTORY # 1     1.749   6       7.426                                           HISTORY # 2     1.362   4.039   5.134                                           HISTORY # 3     1.222   2.827   3.173                                           HISTORY # 4     1.222   2.827   1.961                                           HISTORY # 5     1.222   2.827   1.212                                           HISTORY # 6     1.206   2.541   0.749                                           HISTORY # 7     1.204   2.364   0.4629                                          HISTORY # 8     1.204   2.396   0.1768                                          HISTORY # 9     1.204   2.396   0.0871                                          HISTORY # Converged to minimum: chi^2 = 1.204 at beta = 2.396                   HISTORY #                                                                       HISTORY # Finding optimal decomposition order n_max, beta = 2.396               HISTORY # iter. n_max   chi^2   sigma(chi^2)                                    HISTORY # 1     2       1.204   0.0295                                          HISTORY # 1     4       1.17    0.02956                                         HISTORY # chi^2 becomes flat. Stopping search at n_max = 4.                     HISTORY #                                                                       HISTORY # Finding optimal beta, n_max = 4                                       HISTORY # initial setup: a = 1.917, beta = 2.396, b = 2.635                     HISTORY # after checking limits: a = 1.917, beta = 2.396, b = 2.635             HISTORY # starting values: f(a) = 1.175, f(beta) = 1.17, f(b) = 1.175           HISTORY # after bracketing: f(a) = 1.175, f(beta) = 1.17, f(b) = 1.175          HISTORY # Setting limits: 1.917 <= beta <= 2.635                                HISTORY # Starting with beta = 2.396                                            HISTORY # iter. chi^2   beta    delta(beta)                                     HISTORY # 1     1.168   2.213   0.4791                                          HISTORY # 2     1.168   2.181   0.2961                                          HISTORY # 3     1.168   2.183   0.03219                                         HISTORY # Converged to minimum: chi^2 = 1.168 at beta = 2.183                   HISTORY #                                                                       HISTORY # Decomposition stopped before chi^2 = 1!                               HISTORY #                                                                       HISTORY # Computation time for decomposition: 0 seconds                         REDSHIFT=                 1.34 / photometric redshift                           SED_TYPE=                   10 / SED template                                   MAG     =               27.382 / AB magnitude                                   MAG_ERR =                0.025 / AB magnitude error’ñ,ï|æx¿N/géì?tlÚh¼]¿CŠLd´¾?Ukþ‡|êÕ¿F+K}Ê§?p"¬®Š	e?H(íYkã?M*¿«·ê{        ¿(s\Ay¯?5¡*yOU?V’M„yS«                ?#q½rÚa¿JÆR”CU                        ?W*” ç¦õ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        